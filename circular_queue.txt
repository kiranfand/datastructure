class CircularQueue {
    private int[] queue;
    private int front;
    private int rear;
    private int size;
    private int capacity;

    public CircularQueue(int capacity) {
        this.capacity = capacity;
        this.queue = new int[capacity];
        this.front = -1;
        this.rear = -1;
        this.size = 0;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == capacity;
    }

    public void enqueue(int data) {
        if (isFull()) {
            throw new IllegalStateException("Queue is full. Cannot perform enqueue operation.");
        }

        rear = (rear + 1) % capacity;
        queue[rear] = data;
        if (front == -1) {
            front = rear; // For the first element added, set front to the same index as rear.
        }
        size++;
    }

    public int dequeue() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty. Cannot perform dequeue operation.");
        }

        int data = queue[front];
        if (front == rear) {
            front = -1;
            rear = -1; // If there's only one element in the queue, set front and rear to -1.
        } else {
            front = (front + 1) % capacity;
        }
        size--;
        return data;
    }

    public int peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty. Cannot perform peek operation.");
        }
        return queue[front];
    }

    public int size() {
        return size;
    }
}

public class Main {
    public static void main(String[] args) {
        CircularQueue queue = new CircularQueue(5);

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);

        System.out.println("Front element: " + queue.peek()); // Output: Front element: 10

        int dequeuedElement = queue.dequeue();
        System.out.println("Dequeued element: " + dequeuedElement); // Output: Dequeued element: 10

        queue.enqueue(40);
        queue.enqueue(50);

        System.out.println("Queue size: " + queue.size()); // Output: Queue size: 4
    }
}
